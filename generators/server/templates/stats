#!/usr/bin/env node

/**
 * This utility gathers stats on the host O/S and docker containers.
 * It must be run outside of docker containers, and it continues running
 * until it detects no containers running.
 */

const os = require('os');
const STAT_INTERVAL_MS = 9999;
const { spawn } = require('child_process');
const util = require('util');
const execFile = util.promisify(require('child_process').execFile);
const fs = require('fs');
const writeFile = util.promisify(fs.writeFile);
const writeToFile = (process.argv[2] == '-f');

let statStartStamp = 0;
let STATS_FILE = '';

// Request to daemonize (run in background)
if (process.argv[2] === '-d') {
  spawn(process.argv[0], [process.argv[1], '-f'], {
    detached: true, shell: false, windowsHide: true, stdio: 'ignore'
  }).unref();
  process.exit();
}

// Gather stats and output them
async function gatherStats() {

  // Prevent thrashing, but don't lock up
  if (statStartStamp && (Date.now() - statStartStamp) < 60000) {
    return;
  }
  statStartStamp = Date.now();

  try {
    let { stdout } = await execFile('docker', ['stats','--no-stream','--format',
      '"{{ .Name }}": {"cpu":"{{ .CPUPerc }}","mem":{"usedAvail":"{{ .MemUsage }}","pct":"{{ .MemPerc }}"},"io":{"diskRW":"{{.BlockIO}}","netRW":"{{.NetIO}}"}},']);
    stdout = stdout.toString();
    let containers = JSON.parse('{' + stdout.slice(0,stdout.length - 2) + '}');
    let report = {
      cpus: os.cpus().length,
      loadavg: os.loadavg(),
      osMemAvail: os.totalmem(),
      osMemUsed: os.totalmem() - os.freemem(),
      containers: {}
    };
    let numContainers = 0;
    for (let name in containers) {
      numContainers++;
      report.containers[name] = parseContainer(containers[name]);
    }

    // Stop gathering stats if all containers are stopped
    if (numContainers == 0) {
      console.log('No containers running - exiting.');
      process.exit(0);
    }

    let output = JSON.stringify(report,null,2);
    if (writeToFile) {
      await writeFile(STATS_FILE, output);
    }
    else {
      console.log(output);
    }
  }
  catch(e){
    console.error(e);
  }
  statStartStamp = 0;
}

// Parse the output from docker stats
// {"cpu":"0.00%","mem":{"usedAvail":"1.82MiB / 1.952GiB","pct":"0.09%"},"io":{"diskRW":"422kB / 0B","netRW":"7.56kB / 0B"}}
function parseContainer(container) {
  let report = {
    cpuPct: parseNum(container.cpu),
    mem: {
      bytesAvail: parseNum(container.mem.usedAvail,2),
      bytesUsed: parseNum(container.mem.usedAvail,1),
      pct: parseNum(container.mem.pct),
    },
    ioBytes: {
      diskRead: parseNum(container.io.diskRW,1),
      diskWrite: parseNum(container.io.diskRW,2),
      netRead: parseNum(container.io.netRW,1),
      netWrite: parseNum(container.io.netRW,2),
    }
  }
  return report;
}

// Turn an input string like 14.5GiB into a number
// "7.56kb / 14B" can be parsed with part=1, part=2
function parseNum(input, part) {
  if (part) {
    input = input.split(' / ')[part - 1]
  }
  let num = input.match(/[0-9\.]+/g).toString();
  let ext = input.substr(num.length);
  const extMap = {
    '%'  : 1,
    'B'  : 1,
    'kB' : 1000,
    'kiB': 1024,
    'MB' : 1000000,
    'MiB': 1048576,
    'GB' : 1000000000,
    'GiB': 1073741824,
  }
  num = num * extMap[ext];
  return ext == '%' ? num : Math.floor(num);
}

// Place the contents of the .env file into the environment
function loadEnv() {
  let envEntries = fs.readFileSync('./.env').toString().split('\n');
  for (let entryNum in envEntries) {
    let entry = envEntries[entryNum].trim();
    if (entry.substr(0,1) == "#") {continue;}
    let nvPair = entry.split('=');
    if (nvPair.length == 2) {process.env[nvPair[0]] = nvPair[1];}
  }
}

// Kick it off
loadEnv();
if (writeToFile) {
  STATS_FILE = (process.env['MNT_DIR'] || '.') + '/data/nodered/stats.json';
}
else {
  console.log("Gathering stats...");
}
gatherStats();
setInterval(gatherStats, STAT_INTERVAL_MS);
